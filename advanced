#!/bin/bash

# No globbing
set -f 

HISTFILE=~/.bash_history 

# Absolute paths to executables - Specify the versions we want to use. We don't want to use whatever is in ${PATH} (as specified in the assignment)
CAT=/usr/bin/cat
CLEAR=/usr/bin/clear
CP=/usr/bin/cp
GREP=/usr/bin/grep
FIND=/usr/bin/find
MKDIR=/usr/bin/mkdir
PRINTF=/usr/bin/printf

# Use the built in for ulimit and exit
EXIT="command exit"
ULIMIT="command ulimit"

function showcpunumber() {
	local LOGICALCORES

	LOGICALCORES=$(${CAT} /proc/cpuinfo | ${GREP} processor -c)
	if [ "${LOGICALCORES}" ]; then
		$PRINTF "Amount of cpu cores = ${LOGICALCORES} \n"
	else
		$PRINTF "Failed to get cpu core count.\n"
	fi		
}

function showmaximumfilehandlecount() {
	local FILEHANDLESCAP

	FILEHANDLESCAP=$(${ULIMIT} -n)
	if [ "${FILEHANDLESCAP}" ]; then
		$PRINTF "Max open file handles = ${FILEHANDLESCAP}\n"
	else
		$PRINTF "Failed to obtain maximum file handle count\n"
	fi		
}

function findandcopy() {
	local WILDCARD
	local DESTINATION
	
	WILDCARD=${1}
	DESTINATION=${2}

	if ! $MKDIR -p "${DESTINATION}" 2>/dev/null ; then
    		$PRINTF "\nFailed to create ${DESTINATION}. Exiting.\n"
		$EXIT 3
	fi
	
	# Find any files that match the WILDCARD specified. Exec a copy of the found file to the DESTINATION and redirect STDERR to /dev/null as we want to handle errors ourself.
	if ! $FIND .  -type f -name "${WILDCARD}" -exec $CP {} "${DESTINATION}" \; ; then
		$PRINTF "\nFailed to copy files matching ${WILDCARD} to ${DESTINATION}.\n"
		$EXIT 3
	fi
		
	$PRINTF "\nFiles have been copied matching ${WILDCARD} to ${DESTINATION}\n"
}

function showusage() {
	$PRINTF "\nusage: $0 -p - to show the amount of cpus available in the system"
	$PRINTF "\nusage: $0 -o - to show the maximum number of open files allowed per user"
	$PRINTF "\nusage: $0 -b [WILDCARD] [DESTINATION] - searches for all files that match the WILDCARD specified and copies them to the DESTINATION specified.\n"
	$EXIT 3
}

if [ -z "$1" ]; then
	$PRINTF "\nNo arguments supplied. Usage examples are :\n"
	showusage
	$EXIT 3
fi

${CLEAR}

declare -i ERRORARGS=0
declare -i idx

while getopts ":pob:c:" arg; do
    case "${arg}" in
    	"p")
			showcpunumber
			;;
		"o")
			showmaximumfilehandlecount 	
			;;
		"b")
			params=($@)
			WILDCARD=${OPTARG}
			# Obtain the destination
			idx=$((OPTIND-1))
			DESTINATION=${params[$idx]}
			findandcopy "${WILDCARD}" "${DESTINATION}" 
			;;
		*)
			((ERRORARGS++))
			;;	
	esac
done	

shift $((OPTIND-1))

# If at least one unsupported argument as found, then show usage examples
if [ "${ERRORARGS}" -gt 0 ]; then
	$PRINTF "\nUnsupported arguments found. Usage examples are :\n"
	showusage
fi
